// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user         Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  email           String   @unique @db.VarChar(255)
  password        String   @db.Char(60)
  status          Boolean  @default(true)
  is_admin        Boolean  @default(false)
  register_time   DateTime @default(now())
  templates       Template[]
  templateaccess  TemplateAccess[]
  forms           Form[]
}

model Topic {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(255)
  templates Template[]
}

model Tag {
  id            Int     @id @default(autoincrement()) 
  name          String  @db.VarChar(255)
  templatetags  TemplateTag[]
}

model Template {
  id              BigInt       @id @default(autoincrement()) 
  title           String       @db.VarChar(255)
  description     String       @db.VarChar(510)
  image_url       String?      @db.VarChar(510)
  state           State        @default(public)
  creation_time   DateTime     @default(now())
  topic           Topic        @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  topic_id        Int
  user            User         @relation(fields: [user_id], references: [id_user], onDelete: Cascade)
  user_id         Int
  templatetags    TemplateTag[]
  templateaccess  TemplateAccess[]
  questions       Question[]
  forms           Form[]
}

enum State {
  draft
  public
  restricted
}

model TemplateTag {
  id          BigInt    @id @default(autoincrement()) 
  tag         Tag       @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id      Int
  template    Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id BigInt
}

model TemplateAccess {
  id          BigInt    @id @default(autoincrement()) 
  template    Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id BigInt
  user        User      @relation(fields: [user_id], references: [id_user], onDelete: Cascade)
  user_id     Int
}

model Question {
  id          BigInt        @id @default(autoincrement()) 
  title       String        @db.VarChar(255)
  description String        @db.VarChar(255)
  displayed   Boolean       @default(true)
  type        QuestionType  @default(text)
  template    Template      @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id BigInt
  answers     Answer[]
}

enum QuestionType {
  text
  textarea
  positive_num
  checkbox
}

model Form {
  id          BigInt    @id @default(autoincrement()) 
  fill_time   DateTime  @default(now())
  template    Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id BigInt
  user        User      @relation(fields: [user_id], references: [id_user], onDelete: Cascade)
  user_id     Int
  answers     Answer[]
}

model Answer {
  id            BigInt    @id @default(autoincrement()) 
  answer_value  String       
  form          Form      @relation(fields: [form_id], references: [id], onDelete: Cascade)
  form_id       BigInt
  question      Question  @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id   BigInt 
}
